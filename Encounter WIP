--[[

Sludge Monstrosity

Author: Cyous
Date: May 17, 2015

]]

local mod = getfenv(1)
assert(type(mod) == "table","Critical Error, Burning Legion Citadel module missing!")
module(mod._NAME..".SludgeMonstrosity",package.seeall)
local self = getfenv(1)

-- UNITS IN THIS SCRIPT (5):
local BossID	= 0
local BeastID	= 0
local GrimeID	= 0
local FinkleID	= 0
local FogID		= 0
local CrystalID	= 0

-- SPELLS IN THIS SCRIPT
local Toxic_Sludge			= 0
local Thick_Slime			= 0
local Foul_Fog				= 0
local Grime					= 0
local Crystal				= 0
local Crackle				= 0
local Heavy_Steps			= 0
local Wave_of_Blight		= 0 
local Aura_of_Pestilence	= 0
local Fixate				= 0

function RegisterEncounterUnits(unit,event)
	local InstanceId = unit:GetInstanceId()
	if (self[InstanceId] == nil) then
		self[InstanceId] = {}
	end
	for k,v in pairs self[InstanceId] do
		if unit == nil then 
			table.insert(self[InstanceID], unit)
		end
	end
end

function DespawnEncounterUnits(InstanceId)
	for _,v in pairs self[InstanceId] do
		v:Despawn(0,0)
		v = nil
	end
end

function RemoveCrystal(unit,InstanceId)
	for _,v in pairs(self[InstanceId].unit:GetInRangePlayers()) do
		if v:HasAura(Crystal) then
			v:RemoveAura(Crystal)
		end
	end
end

RegisterUnitEvent(BossID,18,"RegisterEncounterUnits")
RegisterUnitEvent(BeastID,18,"RegisterEncounterUnits")
RegisterUnitEvent(GrimeID,18,"RegisterEncounterUnits")
RegisterUnitEvent(FinkleID,18,"RegisterEncounterUnits")
RegisterUnitEvent(FogID,18,"RegisterEncounterUnits")
RegisterUnitEvent(CrystalID,2,"RegisterEncounterUnits")

function BOSS_OnLoad(unit,event)
	unit:CastSpellOnTarget(Aura_of_Pestilence,unit)
	unit:SetUInt32Value(58, 2) -- Unit unattackable
	local Crystal = PerformIngameSpawn(2, CrystalID, unit:GetMapId(), unit:GetX(), unit:GetY(), unit:GetZ(), unit:GetO(), 1, 0)
end

function CrystalActive(go,event,player)
	local Boss = go:GetInstanceCreature(go:GetMapId(), go:GetInstanceId(), BossID)
	local Finkle = go:GetInstanceCreature(go:GetMapId(), go:GetInstanceId(), FinkleID)
	if Boss ~= nil and Finkle ~= nil then
		for _,v in pairs self[InstanceId] do
			if v == go then
				v = nil
			end
		end
		go:RemoveFromWorld()
		player:CastSpell(Crystal)	
		EncounterHandler(Boss)
	else 
		error("Function 'CrystalActive' returning error: Boss or Finkle not found. InstanceId: "..go:GetInstanceId())
	end
end

function EncounterHandler(Boss)
	Boss:SetUInt32Value(58, 0) -- Unit attackable; boss encounter enabled
end

function EnterCombat(unit,event,attacker)
	unit:RegisterEvent("BOSS_START", 1000,1)
end

function LeaveCombat(unit,event,lastTarget)
	local InstanceId = unit:GetInstanceId()
	DespawnEncounterUnits(InstanceId)
	RemoveCrystal(unit, InstanceId)
	unit:RemoveEvents()
end

function TargetKilled(unit,event,victim)
	for _,v in pairs(self[instanceId]) do
		if v:GetEntry() == FinkleID then
			if victim:HasAura(Crystal) then
				v:SendChatMessage(14,0,"Oh, "..v:GetName()..", you better not be dead!")
			else
				v:SendChatMessage(14,0,"You've got to be better than that!")
			end
		else
			victim:PlayerSendChatMessage(11,0, victim:GetName().." has died.")
		end
	end
end

function UnitDeath(unit,event,lastTarget)
	local InstanceId = unit:GetInstanceId()
	DespawnEncounterUnits(InstanceId)
	unit:RemoveEvents()
	if unit:GetEntry() == BossID then
		RemoveCrystal(unit, InstanceId)
	end
end

function BOSS_START(unit,event)
	unit:RegisterEvent("BOSS_Fixate", 1000, 0)
end

function BossHandler(unit,event)
	local H = self[InstanceId].unit:GetHealthPct()
	if H >= 91 then
		return phase = 0
	elseif H <= 90 and H >= 61 then
		return phase = 1
	elseif H <= 60 and H >= 31 then
		return phase = 2
	elseif H <= 30 then
		return phase = 3
	end
end

function BOSS_Fixate(unit,event)
	for _,v in pairs(self[InstanceId].unit:GetPlayersInRange()) do
		if v:HasAura(Crystal) and v:IsAlive() then
			self[InstanceId].unit:CastSpellOnTarget(Fixate, v)
		elseif self[InstanceId].unit.failure == 0 then --  prevents creating feedback loop from "BOSS_START"
			self[InstanceId].unit.failure = 1
			self[InstanceId].unit:RegisterEvent("BOSS_Fixate_Failure",10000,1)
			self[InstanceId].unit.RegisterEvent("BOSS_Fixate_Failure_Reset", 10000,1)
		end
	end
end

function BOSS_Fixate_Failure_Reset(unit,event)
	self[InstanceId].unit.failure = 0
end

function BOSS_Fixate_Failure(unit,event)
	if self[InstanceId].unit.failure = 1 then
		for _,v in pairs(self[instanceId].unit:GetPlayersInRange()) do
			if v:HasAura(Crystal) and v:IsDead() then
				RegisterEvent("BOSS_Summon_Sludge_Beast", 1, 1)
			end
		end
	end
end

function BOSS_Summon_Sludge_Beast(unit,phase) -- unit is Boss
	PerformIngameSpawn(1, BeastID, unit:GetMapId(), unit:GetX(), unit:GetY(), unit:GetZ(), unit:GetO(), unit:GetFaction(), 0, _, _, _, unit:GetInstanceId())
end
